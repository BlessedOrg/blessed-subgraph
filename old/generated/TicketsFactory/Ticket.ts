// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class MintedFromProof extends ethereum.Event {
  get params(): MintedFromProof__Params {
    return new MintedFromProof__Params(this);
  }
}

export class MintedFromProof__Params {
  _event: MintedFromProof;

  constructor(event: MintedFromProof) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get userSmartWalletAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get context(): string {
    return this._event.parameters[2].value.toString();
  }

  get userSmartWalletAddressFromContext(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SmartWalletUpdated extends ethereum.Event {
  get params(): SmartWalletUpdated__Params {
    return new SmartWalletUpdated__Params(this);
  }
}

export class SmartWalletUpdated__Params {
  _event: SmartWalletUpdated;

  constructor(event: SmartWalletUpdated) {
    this._event = event;
  }

  get previousWallet(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newWallet(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class StakeholderAdded extends ethereum.Event {
  get params(): StakeholderAdded__Params {
    return new StakeholderAdded__Params(this);
  }
}

export class StakeholderAdded__Params {
  _event: StakeholderAdded;

  constructor(event: StakeholderAdded) {
    this._event = event;
  }

  get wallet(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get feePercentage(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StakeholderRemoved extends ethereum.Event {
  get params(): StakeholderRemoved__Params {
    return new StakeholderRemoved__Params(this);
  }
}

export class StakeholderRemoved__Params {
  _event: StakeholderRemoved;

  constructor(event: StakeholderRemoved) {
    this._event = event;
  }

  get wallet(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class StakeholderUpdated extends ethereum.Event {
  get params(): StakeholderUpdated__Params {
    return new StakeholderUpdated__Params(this);
  }
}

export class StakeholderUpdated__Params {
  _event: StakeholderUpdated;

  constructor(event: StakeholderUpdated) {
    this._event = event;
  }

  get wallet(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get feePercentage(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StakeholdersLocked extends ethereum.Event {
  get params(): StakeholdersLocked__Params {
    return new StakeholdersLocked__Params(this);
  }
}

export class StakeholdersLocked__Params {
  _event: StakeholdersLocked;

  constructor(event: StakeholdersLocked) {
    this._event = event;
  }
}

export class SupplyUpdated extends ethereum.Event {
  get params(): SupplyUpdated__Params {
    return new SupplyUpdated__Params(this);
  }
}

export class SupplyUpdated__Params {
  _event: SupplyUpdated;

  constructor(event: SupplyUpdated) {
    this._event = event;
  }

  get newSupply(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Ticket__stakeholdersResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getWallet(): Address {
    return this.value0;
  }

  getFeePercentage(): BigInt {
    return this.value1;
  }
}

export class Ticket extends ethereum.SmartContract {
  static bind(address: Address): Ticket {
    return new Ticket("Ticket", address);
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id),
      ],
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  currentSupply(): BigInt {
    let result = super.call("currentSupply", "currentSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentSupply",
      "currentSupply():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  erc20Address(): Address {
    let result = super.call("erc20Address", "erc20Address():(address)", []);

    return result[0].toAddress();
  }

  try_erc20Address(): ethereum.CallResult<Address> {
    let result = super.tryCall("erc20Address", "erc20Address():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  erc20Token(): Address {
    let result = super.call("erc20Token", "erc20Token():(address)", []);

    return result[0].toAddress();
  }

  try_erc20Token(): ethereum.CallResult<Address> {
    let result = super.tryCall("erc20Token", "erc20Token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  eventAddress(): Address {
    let result = super.call("eventAddress", "eventAddress():(address)", []);

    return result[0].toAddress();
  }

  try_eventAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("eventAddress", "eventAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  exists(id: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id),
    ]);

    return result[0].toBoolean();
  }

  try_exists(id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  extractFieldFromContext(data: string, target: string): string {
    let result = super.call(
      "extractFieldFromContext",
      "extractFieldFromContext(string,string):(string)",
      [ethereum.Value.fromString(data), ethereum.Value.fromString(target)],
    );

    return result[0].toString();
  }

  try_extractFieldFromContext(
    data: string,
    target: string,
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "extractFieldFromContext",
      "extractFieldFromContext(string,string):(string)",
      [ethereum.Value.fromString(data), ethereum.Value.fromString(target)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getTicketHolders(start: BigInt, pageSize: BigInt): Array<Address> {
    let result = super.call(
      "getTicketHolders",
      "getTicketHolders(uint256,uint256):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(start),
        ethereum.Value.fromUnsignedBigInt(pageSize),
      ],
    );

    return result[0].toAddressArray();
  }

  try_getTicketHolders(
    start: BigInt,
    pageSize: BigInt,
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getTicketHolders",
      "getTicketHolders(uint256,uint256):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(start),
        ethereum.Value.fromUnsignedBigInt(pageSize),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getTokensByUser(user: Address): Array<BigInt> {
    let result = super.call(
      "getTokensByUser",
      "getTokensByUser(address):(uint256[])",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBigIntArray();
  }

  try_getTokensByUser(user: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getTokensByUser",
      "getTokensByUser(address):(uint256[])",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  initialSupply(): BigInt {
    let result = super.call("initialSupply", "initialSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_initialSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "initialSupply",
      "initialSupply():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator),
      ],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWhitelisted(param0: Address): boolean {
    let result = super.call("isWhitelisted", "isWhitelisted(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_isWhitelisted(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWhitelisted",
      "isWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxSupply(): BigInt {
    let result = super.call("maxSupply", "maxSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxSupply", "maxSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nextTokenId(): BigInt {
    let result = super.call("nextTokenId", "nextTokenId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextTokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextTokenId", "nextTokenId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerSmartWallet(): Address {
    let result = super.call(
      "ownerSmartWallet",
      "ownerSmartWallet():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_ownerSmartWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ownerSmartWallet",
      "ownerSmartWallet():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  price(): BigInt {
    let result = super.call("price", "price():(uint256)", []);

    return result[0].toBigInt();
  }

  try_price(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("price", "price():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeholders(param0: BigInt): Ticket__stakeholdersResult {
    let result = super.call(
      "stakeholders",
      "stakeholders(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new Ticket__stakeholdersResult(
      result[0].toAddress(),
      result[1].toBigInt(),
    );
  }

  try_stakeholders(
    param0: BigInt,
  ): ethereum.CallResult<Ticket__stakeholdersResult> {
    let result = super.tryCall(
      "stakeholders",
      "stakeholders(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Ticket__stakeholdersResult(value[0].toAddress(), value[1].toBigInt()),
    );
  }

  stakeholdersCounter(): BigInt {
    let result = super.call(
      "stakeholdersCounter",
      "stakeholdersCounter():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_stakeholdersCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakeholdersCounter",
      "stakeholdersCounter():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeholdersLocked(): boolean {
    let result = super.call(
      "stakeholdersLocked",
      "stakeholdersLocked():(bool)",
      [],
    );

    return result[0].toBoolean();
  }

  try_stakeholdersLocked(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "stakeholdersLocked",
      "stakeholdersLocked():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  stringToAddress(_address: string): Address {
    let result = super.call(
      "stringToAddress",
      "stringToAddress(string):(address)",
      [ethereum.Value.fromString(_address)],
    );

    return result[0].toAddress();
  }

  try_stringToAddress(_address: string): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stringToAddress",
      "stringToAddress(string):(address)",
      [ethereum.Value.fromString(_address)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(_tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId),
    ]);

    return result[0].toString();
  }

  try_tokenURI(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalFeePercentage(): BigInt {
    let result = super.call(
      "totalFeePercentage",
      "totalFeePercentage():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalFeePercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalFeePercentage",
      "totalFeePercentage():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply1(id: BigInt): BigInt {
    let result = super.call("totalSupply", "totalSupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id),
    ]);

    return result[0].toBigInt();
  }

  try_totalSupply1(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupply",
      "totalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferable(): boolean {
    let result = super.call("transferable", "transferable():(bool)", []);

    return result[0].toBoolean();
  }

  try_transferable(): ethereum.CallResult<boolean> {
    let result = super.tryCall("transferable", "transferable():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  uri(param0: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toString();
  }

  try_uri(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  userHasToken(user: Address, tokenId: BigInt): boolean {
    let result = super.call(
      "userHasToken",
      "userHasToken(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(tokenId),
      ],
    );

    return result[0].toBoolean();
  }

  try_userHasToken(
    user: Address,
    tokenId: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "userHasToken",
      "userHasToken(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(tokenId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  whitelistOnly(): boolean {
    let result = super.call("whitelistOnly", "whitelistOnly():(bool)", []);

    return result[0].toBoolean();
  }

  try_whitelistOnly(): ethereum.CallResult<boolean> {
    let result = super.tryCall("whitelistOnly", "whitelistOnly():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get config(): ConstructorCallConfigStruct {
    return changetype<ConstructorCallConfigStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCallConfigStruct extends ethereum.Tuple {
  get _owner(): Address {
    return this[0].toAddress();
  }

  get _ownerSmartWallet(): Address {
    return this[1].toAddress();
  }

  get _eventAddress(): Address {
    return this[2].toAddress();
  }

  get _baseURI(): string {
    return this[3].toString();
  }

  get _name(): string {
    return this[4].toString();
  }

  get _symbol(): string {
    return this[5].toString();
  }

  get _erc20Address(): Address {
    return this[6].toAddress();
  }

  get _price(): BigInt {
    return this[7].toBigInt();
  }

  get _initialSupply(): BigInt {
    return this[8].toBigInt();
  }

  get _maxSupply(): BigInt {
    return this[9].toBigInt();
  }

  get _transferable(): boolean {
    return this[10].toBoolean();
  }

  get _whitelistOnly(): boolean {
    return this[11].toBoolean();
  }

  get _stakeholders(): Array<ConstructorCallConfig_stakeholdersStruct> {
    return this[12].toTupleArray<ConstructorCallConfig_stakeholdersStruct>();
  }
}

export class ConstructorCallConfig_stakeholdersStruct extends ethereum.Tuple {
  get wallet(): Address {
    return this[0].toAddress();
  }

  get feePercentage(): BigInt {
    return this[1].toBigInt();
  }
}

export class AddStakeholderCall extends ethereum.Call {
  get inputs(): AddStakeholderCall__Inputs {
    return new AddStakeholderCall__Inputs(this);
  }

  get outputs(): AddStakeholderCall__Outputs {
    return new AddStakeholderCall__Outputs(this);
  }
}

export class AddStakeholderCall__Inputs {
  _call: AddStakeholderCall;

  constructor(call: AddStakeholderCall) {
    this._call = call;
  }

  get _wallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _feePercentage(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddStakeholderCall__Outputs {
  _call: AddStakeholderCall;

  constructor(call: AddStakeholderCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class BurnBatchCall extends ethereum.Call {
  get inputs(): BurnBatchCall__Inputs {
    return new BurnBatchCall__Inputs(this);
  }

  get outputs(): BurnBatchCall__Outputs {
    return new BurnBatchCall__Outputs(this);
  }
}

export class BurnBatchCall__Inputs {
  _call: BurnBatchCall;

  constructor(call: BurnBatchCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class BurnBatchCall__Outputs {
  _call: BurnBatchCall;

  constructor(call: BurnBatchCall) {
    this._call = call;
  }
}

export class DistributeCall extends ethereum.Call {
  get inputs(): DistributeCall__Inputs {
    return new DistributeCall__Inputs(this);
  }

  get outputs(): DistributeCall__Outputs {
    return new DistributeCall__Outputs(this);
  }
}

export class DistributeCall__Inputs {
  _call: DistributeCall;

  constructor(call: DistributeCall) {
    this._call = call;
  }

  get _distributions(): Array<DistributeCall_distributionsStruct> {
    return this._call.inputValues[0].value.toTupleArray<DistributeCall_distributionsStruct>();
  }
}

export class DistributeCall__Outputs {
  _call: DistributeCall;

  constructor(call: DistributeCall) {
    this._call = call;
  }
}

export class DistributeCall_distributionsStruct extends ethereum.Tuple {
  get recipient(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class GetCall extends ethereum.Call {
  get inputs(): GetCall__Inputs {
    return new GetCall__Inputs(this);
  }

  get outputs(): GetCall__Outputs {
    return new GetCall__Outputs(this);
  }
}

export class GetCall__Inputs {
  _call: GetCall;

  constructor(call: GetCall) {
    this._call = call;
  }
}

export class GetCall__Outputs {
  _call: GetCall;

  constructor(call: GetCall) {
    this._call = call;
  }
}

export class RemoveStakeholderCall extends ethereum.Call {
  get inputs(): RemoveStakeholderCall__Inputs {
    return new RemoveStakeholderCall__Inputs(this);
  }

  get outputs(): RemoveStakeholderCall__Outputs {
    return new RemoveStakeholderCall__Outputs(this);
  }
}

export class RemoveStakeholderCall__Inputs {
  _call: RemoveStakeholderCall;

  constructor(call: RemoveStakeholderCall) {
    this._call = call;
  }

  get _index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveStakeholderCall__Outputs {
  _call: RemoveStakeholderCall;

  constructor(call: RemoveStakeholderCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetSmartWalletCall extends ethereum.Call {
  get inputs(): SetSmartWalletCall__Inputs {
    return new SetSmartWalletCall__Inputs(this);
  }

  get outputs(): SetSmartWalletCall__Outputs {
    return new SetSmartWalletCall__Outputs(this);
  }
}

export class SetSmartWalletCall__Inputs {
  _call: SetSmartWalletCall;

  constructor(call: SetSmartWalletCall) {
    this._call = call;
  }

  get _smartWallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSmartWalletCall__Outputs {
  _call: SetSmartWalletCall;

  constructor(call: SetSmartWalletCall) {
    this._call = call;
  }
}

export class SetTransferableCall extends ethereum.Call {
  get inputs(): SetTransferableCall__Inputs {
    return new SetTransferableCall__Inputs(this);
  }

  get outputs(): SetTransferableCall__Outputs {
    return new SetTransferableCall__Outputs(this);
  }
}

export class SetTransferableCall__Inputs {
  _call: SetTransferableCall;

  constructor(call: SetTransferableCall) {
    this._call = call;
  }

  get _transferable(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetTransferableCall__Outputs {
  _call: SetTransferableCall;

  constructor(call: SetTransferableCall) {
    this._call = call;
  }
}

export class SetURICall extends ethereum.Call {
  get inputs(): SetURICall__Inputs {
    return new SetURICall__Inputs(this);
  }

  get outputs(): SetURICall__Outputs {
    return new SetURICall__Outputs(this);
  }
}

export class SetURICall__Inputs {
  _call: SetURICall;

  constructor(call: SetURICall) {
    this._call = call;
  }

  get newuri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetURICall__Outputs {
  _call: SetURICall;

  constructor(call: SetURICall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateStakeholderCall extends ethereum.Call {
  get inputs(): UpdateStakeholderCall__Inputs {
    return new UpdateStakeholderCall__Inputs(this);
  }

  get outputs(): UpdateStakeholderCall__Outputs {
    return new UpdateStakeholderCall__Outputs(this);
  }
}

export class UpdateStakeholderCall__Inputs {
  _call: UpdateStakeholderCall;

  constructor(call: UpdateStakeholderCall) {
    this._call = call;
  }

  get _index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _feePercentage(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateStakeholderCall__Outputs {
  _call: UpdateStakeholderCall;

  constructor(call: UpdateStakeholderCall) {
    this._call = call;
  }
}

export class UpdateSupplyCall extends ethereum.Call {
  get inputs(): UpdateSupplyCall__Inputs {
    return new UpdateSupplyCall__Inputs(this);
  }

  get outputs(): UpdateSupplyCall__Outputs {
    return new UpdateSupplyCall__Outputs(this);
  }
}

export class UpdateSupplyCall__Inputs {
  _call: UpdateSupplyCall;

  constructor(call: UpdateSupplyCall) {
    this._call = call;
  }

  get _additionalSupply(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateSupplyCall__Outputs {
  _call: UpdateSupplyCall;

  constructor(call: UpdateSupplyCall) {
    this._call = call;
  }
}

export class UpdateWhitelistCall extends ethereum.Call {
  get inputs(): UpdateWhitelistCall__Inputs {
    return new UpdateWhitelistCall__Inputs(this);
  }

  get outputs(): UpdateWhitelistCall__Outputs {
    return new UpdateWhitelistCall__Outputs(this);
  }
}

export class UpdateWhitelistCall__Inputs {
  _call: UpdateWhitelistCall;

  constructor(call: UpdateWhitelistCall) {
    this._call = call;
  }

  get _whitelistUpdates(): Array<UpdateWhitelistCall_whitelistUpdatesStruct> {
    return this._call.inputValues[0].value.toTupleArray<UpdateWhitelistCall_whitelistUpdatesStruct>();
  }
}

export class UpdateWhitelistCall__Outputs {
  _call: UpdateWhitelistCall;

  constructor(call: UpdateWhitelistCall) {
    this._call = call;
  }
}

export class UpdateWhitelistCall_whitelistUpdatesStruct extends ethereum.Tuple {
  get user(): Address {
    return this[0].toAddress();
  }

  get status(): boolean {
    return this[1].toBoolean();
  }
}

export class VerifyProofAndMintCall extends ethereum.Call {
  get inputs(): VerifyProofAndMintCall__Inputs {
    return new VerifyProofAndMintCall__Inputs(this);
  }

  get outputs(): VerifyProofAndMintCall__Outputs {
    return new VerifyProofAndMintCall__Outputs(this);
  }
}

export class VerifyProofAndMintCall__Inputs {
  _call: VerifyProofAndMintCall;

  constructor(call: VerifyProofAndMintCall) {
    this._call = call;
  }

  get proof(): VerifyProofAndMintCallProofStruct {
    return changetype<VerifyProofAndMintCallProofStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class VerifyProofAndMintCall__Outputs {
  _call: VerifyProofAndMintCall;

  constructor(call: VerifyProofAndMintCall) {
    this._call = call;
  }
}

export class VerifyProofAndMintCallProofStruct extends ethereum.Tuple {
  get claimInfo(): VerifyProofAndMintCallProofClaimInfoStruct {
    return changetype<VerifyProofAndMintCallProofClaimInfoStruct>(
      this[0].toTuple(),
    );
  }

  get signedClaim(): VerifyProofAndMintCallProofSignedClaimStruct {
    return changetype<VerifyProofAndMintCallProofSignedClaimStruct>(
      this[1].toTuple(),
    );
  }
}

export class VerifyProofAndMintCallProofClaimInfoStruct extends ethereum.Tuple {
  get provider(): string {
    return this[0].toString();
  }

  get parameters(): string {
    return this[1].toString();
  }

  get context(): string {
    return this[2].toString();
  }
}

export class VerifyProofAndMintCallProofSignedClaimStruct extends ethereum.Tuple {
  get claim(): VerifyProofAndMintCallProofSignedClaimClaimStruct {
    return changetype<VerifyProofAndMintCallProofSignedClaimClaimStruct>(
      this[0].toTuple(),
    );
  }

  get signatures(): Array<Bytes> {
    return this[1].toBytesArray();
  }
}

export class VerifyProofAndMintCallProofSignedClaimClaimStruct extends ethereum.Tuple {
  get identifier(): Bytes {
    return this[0].toBytes();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get timestampS(): BigInt {
    return this[2].toBigInt();
  }

  get epoch(): BigInt {
    return this[3].toBigInt();
  }
}
